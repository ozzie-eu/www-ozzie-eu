<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Console on Ozzie.eu</title>
    <link>/categories/console/</link>
    <description>Recent content in Console on Ozzie.eu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 31 Mar 2025 12:30:22 +0100</lastBuildDate><atom:link href="/categories/console/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Cross-Platform Mirage: .NET and the Windows Dependency Trap</title>
      <link>/post/dotnet-cross-platform-mirage/</link>
      <pubDate>Mon, 31 Mar 2025 12:30:22 +0100</pubDate>
      
      <guid>/post/dotnet-cross-platform-mirage/</guid>
      <description>The Cross-Platform Mirage: .NET and the Windows Dependency Trap The promise of .NET has always included cross-platform capabilities, allowing developers to build applications that run seamlessly on Windows, Linux, and macOS. However, this dream can quickly turn into a mirage when you rely on third-party packages, even those from Microsoft, that are intrinsically tied to the Windows operating system.
Let&amp;rsquo;s dive into a couple of real-world scenarios that illustrate this pitfall.</description>
    </item>
    
    <item>
      <title>Better Powershell SQL comand exection using Dbatools</title>
      <link>/post/posh-better-sqlcmd-using-dbatools/</link>
      <pubDate>Mon, 27 Jun 2022 11:20:16 +0100</pubDate>
      
      <guid>/post/posh-better-sqlcmd-using-dbatools/</guid>
      <description>Recently I chose to develop a quick batch solution, for working with SQL Server databases, using Powershell and the Invoke-SqlCmd cmdlet. I was faced with unexpected errors. After quick workaround on the code, I was able to get things done. However, recently I got to redo the batch resulting on a more performant solution. The key to this was the Invoke-DbaQuery Cmdlet.
The Invoke-DbaQuery Cmdlet is part of the Dbatools, a free PowerShell module with over 500 SQL Server best practice, administration, development and migration commands included.</description>
    </item>
    
    <item>
      <title>Powershell Error on Invoke-Sqlcmd?  Ditch the pipe operator.</title>
      <link>/post/posh-error-invoke-sqlcmd/</link>
      <pubDate>Mon, 20 Jun 2022 11:20:16 +0100</pubDate>
      
      <guid>/post/posh-error-invoke-sqlcmd/</guid>
      <description>As you might have read, I&amp;rsquo;m a fan of getting things done. Having to develop a quick batch solution for some data copying between different SQL Server databases, I chose to use Powershell scripting and the Invoke-SqlCmd cmdlet. However I faced unexpected errors for something as trivial as an export/import job. The first version of my script went like the example below:
On execution, it read the first record correctly and then aborted with the following error:</description>
    </item>
    
    <item>
      <title>Python script to unfollow inactive friends on Twitter</title>
      <link>/post/twitter-unfollow-inactive/</link>
      <pubDate>Mon, 25 Oct 2021 15:50:14 +0100</pubDate>
      
      <guid>/post/twitter-unfollow-inactive/</guid>
      <description>Twitter is great to learn the news of your chosen interests, but sometimes your get stuck with an increasing amount of inactive friends who haven&amp;rsquo;t updated their status in ages. It&amp;rsquo;s a daunting task to go over all of your friends, check their status, and unfollow the ones not using Twitter for a long time.
I&amp;rsquo;ve written a Python script to do this. The script works with the following python packages:</description>
    </item>
    
    <item>
      <title>Using Windows Subsystem for Linux for cross-platform testing</title>
      <link>/post/wsl-cross-platform-testing/</link>
      <pubDate>Fri, 11 Jun 2021 13:00:00 +0100</pubDate>
      
      <guid>/post/wsl-cross-platform-testing/</guid>
      <description>Windows Subsystem for Linux is a wonderful feature to perform cross-plataform testing without having to install 3rd party virtualization software or containers.
It&amp;rsquo;s been around as an optional feature on Microsoft&amp;rsquo;s Windows 10, since 2016. With the release of WSL2, users can now use a genuine linux kernel running on top of a Virtual Machine Platform based on a subset of Hyper-V features.
Before you proceed, be sure you&amp;rsquo;re running all the latest Windows updates.</description>
    </item>
    
    <item>
      <title>Generating PDF in .NET Core using Libreoffice</title>
      <link>/post/pdf-dotnet-libreoffice/</link>
      <pubDate>Fri, 14 May 2021 15:16:04 +0100</pubDate>
      
      <guid>/post/pdf-dotnet-libreoffice/</guid>
      <description>Looking for Nuget extensions to generate PDF output, there&amp;rsquo;s a lot of offer, but you have to either convert from another format like HTML or hard-code each page, text block, and layout. Also, most extensions come in freemium versions.
An interesting option is used by the team at Smart In Media GmbH &amp;amp; Co. KG. To use their words:
I was surprised, just how difficult that endeavor is if you don&amp;rsquo;t want to pay huge amounts of money to commercial libraries.</description>
    </item>
    
    <item>
      <title>Reading appsettings.json without DI/IoC using .NET Core</title>
      <link>/post/appsettings-wo-di-ioc/</link>
      <pubDate>Mon, 19 Apr 2021 18:05:17 +0100</pubDate>
      
      <guid>/post/appsettings-wo-di-ioc/</guid>
      <description>Creating a console program to run a batch job or some other kind of recurrent task is nice. Even nicer is to be able to pass along some parameters using a configuration file.
If you search the Internet for some help on using a configuration file with a .NET Core console application, you get some pretty good results if you want to use some Dependency Injection/Inversion of Control pattern, or build classes to represent and perform a sort of unmarshalling of the JSON configuration file, or even go through the Microsoft Docs that probably inspired the first two options.</description>
    </item>
    
    <item>
      <title>Automation programs in .NET Core - more examples</title>
      <link>/post/more-automate-programs/</link>
      <pubDate>Wed, 07 Apr 2021 17:30:14 +0100</pubDate>
      
      <guid>/post/more-automate-programs/</guid>
      <description>I&amp;rsquo;ve added some more examples to the collection of simple programs, using C#, for automating everyday tasks with .NET Core. The updated list of examples now includes:
Organize files inside a folder according to date: date-named-folders Compress files inside a given folder into a ZIP archive: compress-folder-zip Flatten a folder, moving files to parent directory: flatten-folder Scrape html table to csv text file: web-scrape-table Take a CSV file and save it into Excel: save-csv-to-excel Create a basic Word document: create-simple-docx Search text inside Word documents on a given folder and subfolders: search-text-docx Get JSON data from a REST end point, parse and display content: read-json.</description>
    </item>
    
    <item>
      <title>Simple automation programs in .NET Core</title>
      <link>/post/automate-dotnetcore/</link>
      <pubDate>Fri, 12 Mar 2021 16:05:02 +0000</pubDate>
      
      <guid>/post/automate-dotnetcore/</guid>
      <description>I&amp;rsquo;m building a collection of simple programs, using C#, for automating everyday tasks with .NET Core. So far I&amp;rsquo;ve made available examples on how to:
Organize files inside a folder according to date: date-named-folders Compress files inside a given folder into a ZIP archive: compress-folder-zip Flatten a folder, moving files to parent directory: flatten-folder Scrape html table to csv text file: web-scrape-table Take a CSV file and save it into Excel: save-csv-to-excel The samples are built with VSCode, the integrated terminal and the following extensions:</description>
    </item>
    
  </channel>
</rss>
