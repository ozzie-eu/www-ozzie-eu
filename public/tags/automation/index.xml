<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Automation on Ozzie.eu</title>
    <link>http://localhost:44149/tags/automation/</link>
    <description>Recent content in Automation on Ozzie.eu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 14 May 2021 15:16:04 +0100</lastBuildDate>
    <atom:link href="http://localhost:44149/tags/automation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generating PDF in .NET Core using Libreoffice</title>
      <link>http://localhost:44149/post/pdf-dotnet-libreoffice/</link>
      <pubDate>Fri, 14 May 2021 15:16:04 +0100</pubDate>
      <guid>http://localhost:44149/post/pdf-dotnet-libreoffice/</guid>
      <description>Looking for Nuget extensions to generate PDF output, there&amp;rsquo;s a lot of offer, but you have to either convert from another format like HTML or hard-code each page, text block, and layout. Also, most extensions come in freemium versions.&#xA;An interesting option is used by the team at Smart In Media GmbH &amp;amp; Co. KG. To use their words:&#xA;I was surprised, just how difficult that endeavor is if you don&amp;rsquo;t want to pay huge amounts of money to commercial libraries.</description>
    </item>
    <item>
      <title>Reading appsettings.json without DI/IoC using .NET Core</title>
      <link>http://localhost:44149/post/appsettings-wo-di-ioc/</link>
      <pubDate>Mon, 19 Apr 2021 18:05:17 +0100</pubDate>
      <guid>http://localhost:44149/post/appsettings-wo-di-ioc/</guid>
      <description>Creating a console program to run a batch job or some other kind of recurrent task is nice. Even nicer is to be able to pass along some parameters using a configuration file.&#xA;If you search the Internet for some help on using a configuration file with a .NET Core console application, you get some pretty good results if you want to use some Dependency Injection/Inversion of Control pattern, or build classes to represent and perform a sort of unmarshalling of the JSON configuration file, or even go through the Microsoft Docs that probably inspired the first two options.</description>
    </item>
    <item>
      <title>Automation programs in .NET Core - more examples</title>
      <link>http://localhost:44149/post/more-automate-programs/</link>
      <pubDate>Wed, 07 Apr 2021 17:30:14 +0100</pubDate>
      <guid>http://localhost:44149/post/more-automate-programs/</guid>
      <description>I&amp;rsquo;ve added some more examples to the collection of simple programs, using C#, for automating everyday tasks with .NET Core. The updated list of examples now includes:&#xA;Organize files inside a folder according to date: date-named-folders Compress files inside a given folder into a ZIP archive: compress-folder-zip Flatten a folder, moving files to parent directory: flatten-folder Scrape html table to csv text file: web-scrape-table Take a CSV file and save it into Excel: save-csv-to-excel Create a basic Word document: create-simple-docx Search text inside Word documents on a given folder and subfolders: search-text-docx Get JSON data from a REST end point, parse and display content: read-json.</description>
    </item>
    <item>
      <title>Simple automation programs in .NET Core</title>
      <link>http://localhost:44149/post/automate-dotnetcore/</link>
      <pubDate>Fri, 12 Mar 2021 16:05:02 +0000</pubDate>
      <guid>http://localhost:44149/post/automate-dotnetcore/</guid>
      <description>I&amp;rsquo;m building a collection of simple programs, using C#, for automating everyday tasks with .NET Core. So far I&amp;rsquo;ve made available examples on how to:&#xA;Organize files inside a folder according to date: date-named-folders Compress files inside a given folder into a ZIP archive: compress-folder-zip Flatten a folder, moving files to parent directory: flatten-folder Scrape html table to csv text file: web-scrape-table Take a CSV file and save it into Excel: save-csv-to-excel The samples are built with VSCode, the integrated terminal and the following extensions:</description>
    </item>
  </channel>
</rss>
