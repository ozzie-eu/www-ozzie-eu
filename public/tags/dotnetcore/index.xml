<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotnetcore on Ozzie.eu</title>
    <link>/tags/dotnetcore/</link>
    <description>Recent content in dotnetcore on Ozzie.eu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 31 Mar 2025 12:30:22 +0100</lastBuildDate><atom:link href="/tags/dotnetcore/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Cross-Platform Mirage: .NET and the Windows Dependency Trap</title>
      <link>/post/dotnet-cross-platform-mirage/</link>
      <pubDate>Mon, 31 Mar 2025 12:30:22 +0100</pubDate>
      
      <guid>/post/dotnet-cross-platform-mirage/</guid>
      <description>The Cross-Platform Mirage: .NET and the Windows Dependency Trap The promise of .NET has always included cross-platform capabilities, allowing developers to build applications that run seamlessly on Windows, Linux, and macOS. However, this dream can quickly turn into a mirage when you rely on third-party packages, even those from Microsoft, that are intrinsically tied to the Windows operating system.
Let&amp;rsquo;s dive into a couple of real-world scenarios that illustrate this pitfall.</description>
    </item>
    
    <item>
      <title>ORM vs. Raw SQL: A Performance Showdown</title>
      <link>/post/orm-vs-raw-sql/</link>
      <pubDate>Tue, 29 Oct 2024 12:38:26 +0000</pubDate>
      
      <guid>/post/orm-vs-raw-sql/</guid>
      <description>ORM vs. Raw SQL: A Performance Showdown with Northwind Traders
In the realm of data access, the choice between Object-Relational Mappers (ORMs) like Entity Framework (EF) Core and direct SQL approaches like Dapper can significantly impact application performance. Let&amp;rsquo;s delve into the nuances of each and explore a comparative analysis using .NET code examples, benchmarking their performance against the classic Northwind Traders database.
Understanding the Contenders
ORM (Entity Framework Core):</description>
    </item>
    
    <item>
      <title>Recover deleted .net EF Core Migration History Table</title>
      <link>/post/deleted-dotnet-ef-core-migration-history/</link>
      <pubDate>Thu, 23 May 2024 16:02:02 +0100</pubDate>
      
      <guid>/post/deleted-dotnet-ef-core-migration-history/</guid>
      <description>Working with Microsoft EF Core you might need to recover the records on the entity framework migration history table. Here&amp;rsquo;s an easy way to do it, right from Visual Studio&amp;rsquo;s Package Manager Console.
If you&amp;rsquo;re using migrations, for sure you have used Microsoft.EntityFrameworkCore.Tools. this tools make available a set of Cmdlets, the one we need for the task in hand is Get-Migration.
First of all, go to the Nuget Package Manager and check which version of the EF package you are using.</description>
    </item>
    
    <item>
      <title>Why I think you should use only LTS versions of .NET</title>
      <link>/post/why-use-only-dotnet-lts-versions/</link>
      <pubDate>Thu, 13 Apr 2023 14:03:58 +0100</pubDate>
      
      <guid>/post/why-use-only-dotnet-lts-versions/</guid>
      <description>In this blog post, I want to share with you why I think you should use only LTS versions of .NET when programming. If you&amp;rsquo;re not familiar with the terms, LTS stands for Long Term Support and .NET is the platform that provides a runtime, a SDK, and various libraries and frameworks for building applications.
.NET has a release cadence of one major version every year in November. Each release is either LTS or STS (Standard Term Support).</description>
    </item>
    
    <item>
      <title>EF Core Update Model on Database First Project</title>
      <link>/post/ef-core-update-model-db-first/</link>
      <pubDate>Tue, 07 Sep 2021 12:00:48 +0100</pubDate>
      
      <guid>/post/ef-core-update-model-db-first/</guid>
      <description>Started on a software project that will run using an existing database. Went with a minimalistic structure and used the EF Core Tools, from the Package Manager Console in Visual Studio, to generate the database context and table model classes. Namely scaffold-dbcontext. Used the &amp;lsquo;-t&amp;rsquo; option to create just the model classes I would use. It went very well and development went on, business as usual.
As it turned out, I missed a table, so I had to add the model class for that and update the database context.</description>
    </item>
    
    <item>
      <title>Using Windows Subsystem for Linux for cross-platform testing</title>
      <link>/post/wsl-cross-platform-testing/</link>
      <pubDate>Fri, 11 Jun 2021 13:00:00 +0100</pubDate>
      
      <guid>/post/wsl-cross-platform-testing/</guid>
      <description>Windows Subsystem for Linux is a wonderful feature to perform cross-plataform testing without having to install 3rd party virtualization software or containers.
It&amp;rsquo;s been around as an optional feature on Microsoft&amp;rsquo;s Windows 10, since 2016. With the release of WSL2, users can now use a genuine linux kernel running on top of a Virtual Machine Platform based on a subset of Hyper-V features.
Before you proceed, be sure you&amp;rsquo;re running all the latest Windows updates.</description>
    </item>
    
    <item>
      <title>Generating PDF in .NET Core using Libreoffice</title>
      <link>/post/pdf-dotnet-libreoffice/</link>
      <pubDate>Fri, 14 May 2021 15:16:04 +0100</pubDate>
      
      <guid>/post/pdf-dotnet-libreoffice/</guid>
      <description>Looking for Nuget extensions to generate PDF output, there&amp;rsquo;s a lot of offer, but you have to either convert from another format like HTML or hard-code each page, text block, and layout. Also, most extensions come in freemium versions.
An interesting option is used by the team at Smart In Media GmbH &amp;amp; Co. KG. To use their words:
I was surprised, just how difficult that endeavor is if you don&amp;rsquo;t want to pay huge amounts of money to commercial libraries.</description>
    </item>
    
    <item>
      <title>Reading appsettings.json without DI/IoC using .NET Core</title>
      <link>/post/appsettings-wo-di-ioc/</link>
      <pubDate>Mon, 19 Apr 2021 18:05:17 +0100</pubDate>
      
      <guid>/post/appsettings-wo-di-ioc/</guid>
      <description>Creating a console program to run a batch job or some other kind of recurrent task is nice. Even nicer is to be able to pass along some parameters using a configuration file.
If you search the Internet for some help on using a configuration file with a .NET Core console application, you get some pretty good results if you want to use some Dependency Injection/Inversion of Control pattern, or build classes to represent and perform a sort of unmarshalling of the JSON configuration file, or even go through the Microsoft Docs that probably inspired the first two options.</description>
    </item>
    
    <item>
      <title>Automation programs in .NET Core - more examples</title>
      <link>/post/more-automate-programs/</link>
      <pubDate>Wed, 07 Apr 2021 17:30:14 +0100</pubDate>
      
      <guid>/post/more-automate-programs/</guid>
      <description>I&amp;rsquo;ve added some more examples to the collection of simple programs, using C#, for automating everyday tasks with .NET Core. The updated list of examples now includes:
Organize files inside a folder according to date: date-named-folders Compress files inside a given folder into a ZIP archive: compress-folder-zip Flatten a folder, moving files to parent directory: flatten-folder Scrape html table to csv text file: web-scrape-table Take a CSV file and save it into Excel: save-csv-to-excel Create a basic Word document: create-simple-docx Search text inside Word documents on a given folder and subfolders: search-text-docx Get JSON data from a REST end point, parse and display content: read-json.</description>
    </item>
    
    <item>
      <title>SQL Server alias is not supported on .NET Core</title>
      <link>/post/sqlalias-no-support-dotnetcore/</link>
      <pubDate>Mon, 22 Mar 2021 15:58:36 +0000</pubDate>
      
      <guid>/post/sqlalias-no-support-dotnetcore/</guid>
      <description>Sharing is caring, so this is more to save time for other developers out there than to put something new on the table. Having set-up 3 different environments, development, Q&amp;amp;A, and Production for an ASP.NET Core application, I tried to preserve the naming on the configuration parameters so that rollouts between them would have a low impact on necessary changes.
One of the things I remembered was to create SQL Server alias with identical names between environments.</description>
    </item>
    
    <item>
      <title>Simple automation programs in .NET Core</title>
      <link>/post/automate-dotnetcore/</link>
      <pubDate>Fri, 12 Mar 2021 16:05:02 +0000</pubDate>
      
      <guid>/post/automate-dotnetcore/</guid>
      <description>I&amp;rsquo;m building a collection of simple programs, using C#, for automating everyday tasks with .NET Core. So far I&amp;rsquo;ve made available examples on how to:
Organize files inside a folder according to date: date-named-folders Compress files inside a given folder into a ZIP archive: compress-folder-zip Flatten a folder, moving files to parent directory: flatten-folder Scrape html table to csv text file: web-scrape-table Take a CSV file and save it into Excel: save-csv-to-excel The samples are built with VSCode, the integrated terminal and the following extensions:</description>
    </item>
    
  </channel>
</rss>
